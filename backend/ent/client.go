// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"log"

	"github.com/kirbby/Menu_Selector/ent/migrate"

	"github.com/kirbby/Menu_Selector/ent/guest"
	"github.com/kirbby/Menu_Selector/ent/menuitem"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// Guest is the client for interacting with the Guest builders.
	Guest *GuestClient
	// MenuItem is the client for interacting with the MenuItem builders.
	MenuItem *MenuItemClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	cfg := config{log: log.Println, hooks: &hooks{}}
	cfg.options(opts...)
	client := &Client{config: cfg}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.Guest = NewGuestClient(c.config)
	c.MenuItem = NewMenuItemClient(c.config)
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:      ctx,
		config:   cfg,
		Guest:    NewGuestClient(cfg),
		MenuItem: NewMenuItemClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:      ctx,
		config:   cfg,
		Guest:    NewGuestClient(cfg),
		MenuItem: NewMenuItemClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		Guest.
//		Query().
//		Count(ctx)
//
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.Guest.Use(hooks...)
	c.MenuItem.Use(hooks...)
}

// GuestClient is a client for the Guest schema.
type GuestClient struct {
	config
}

// NewGuestClient returns a client for the Guest from the given config.
func NewGuestClient(c config) *GuestClient {
	return &GuestClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `guest.Hooks(f(g(h())))`.
func (c *GuestClient) Use(hooks ...Hook) {
	c.hooks.Guest = append(c.hooks.Guest, hooks...)
}

// Create returns a create builder for Guest.
func (c *GuestClient) Create() *GuestCreate {
	mutation := newGuestMutation(c.config, OpCreate)
	return &GuestCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Guest entities.
func (c *GuestClient) CreateBulk(builders ...*GuestCreate) *GuestCreateBulk {
	return &GuestCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Guest.
func (c *GuestClient) Update() *GuestUpdate {
	mutation := newGuestMutation(c.config, OpUpdate)
	return &GuestUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *GuestClient) UpdateOne(gu *Guest) *GuestUpdateOne {
	mutation := newGuestMutation(c.config, OpUpdateOne, withGuest(gu))
	return &GuestUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *GuestClient) UpdateOneID(id int) *GuestUpdateOne {
	mutation := newGuestMutation(c.config, OpUpdateOne, withGuestID(id))
	return &GuestUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Guest.
func (c *GuestClient) Delete() *GuestDelete {
	mutation := newGuestMutation(c.config, OpDelete)
	return &GuestDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *GuestClient) DeleteOne(gu *Guest) *GuestDeleteOne {
	return c.DeleteOneID(gu.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *GuestClient) DeleteOneID(id int) *GuestDeleteOne {
	builder := c.Delete().Where(guest.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &GuestDeleteOne{builder}
}

// Query returns a query builder for Guest.
func (c *GuestClient) Query() *GuestQuery {
	return &GuestQuery{
		config: c.config,
	}
}

// Get returns a Guest entity by its id.
func (c *GuestClient) Get(ctx context.Context, id int) (*Guest, error) {
	return c.Query().Where(guest.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *GuestClient) GetX(ctx context.Context, id int) *Guest {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *GuestClient) Hooks() []Hook {
	return c.hooks.Guest
}

// MenuItemClient is a client for the MenuItem schema.
type MenuItemClient struct {
	config
}

// NewMenuItemClient returns a client for the MenuItem from the given config.
func NewMenuItemClient(c config) *MenuItemClient {
	return &MenuItemClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `menuitem.Hooks(f(g(h())))`.
func (c *MenuItemClient) Use(hooks ...Hook) {
	c.hooks.MenuItem = append(c.hooks.MenuItem, hooks...)
}

// Create returns a create builder for MenuItem.
func (c *MenuItemClient) Create() *MenuItemCreate {
	mutation := newMenuItemMutation(c.config, OpCreate)
	return &MenuItemCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of MenuItem entities.
func (c *MenuItemClient) CreateBulk(builders ...*MenuItemCreate) *MenuItemCreateBulk {
	return &MenuItemCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for MenuItem.
func (c *MenuItemClient) Update() *MenuItemUpdate {
	mutation := newMenuItemMutation(c.config, OpUpdate)
	return &MenuItemUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *MenuItemClient) UpdateOne(mi *MenuItem) *MenuItemUpdateOne {
	mutation := newMenuItemMutation(c.config, OpUpdateOne, withMenuItem(mi))
	return &MenuItemUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *MenuItemClient) UpdateOneID(id int) *MenuItemUpdateOne {
	mutation := newMenuItemMutation(c.config, OpUpdateOne, withMenuItemID(id))
	return &MenuItemUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for MenuItem.
func (c *MenuItemClient) Delete() *MenuItemDelete {
	mutation := newMenuItemMutation(c.config, OpDelete)
	return &MenuItemDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *MenuItemClient) DeleteOne(mi *MenuItem) *MenuItemDeleteOne {
	return c.DeleteOneID(mi.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *MenuItemClient) DeleteOneID(id int) *MenuItemDeleteOne {
	builder := c.Delete().Where(menuitem.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &MenuItemDeleteOne{builder}
}

// Query returns a query builder for MenuItem.
func (c *MenuItemClient) Query() *MenuItemQuery {
	return &MenuItemQuery{
		config: c.config,
	}
}

// Get returns a MenuItem entity by its id.
func (c *MenuItemClient) Get(ctx context.Context, id int) (*MenuItem, error) {
	return c.Query().Where(menuitem.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *MenuItemClient) GetX(ctx context.Context, id int) *MenuItem {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *MenuItemClient) Hooks() []Hook {
	return c.hooks.MenuItem
}
