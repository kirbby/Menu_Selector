// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/kirbby/Menu_Selector/ent/menuitem"
)

// MenuItemCreate is the builder for creating a MenuItem entity.
type MenuItemCreate struct {
	config
	mutation *MenuItemMutation
	hooks    []Hook
}

// SetName sets the "name" field.
func (mic *MenuItemCreate) SetName(s string) *MenuItemCreate {
	mic.mutation.SetName(s)
	return mic
}

// SetNillableName sets the "name" field if the given value is not nil.
func (mic *MenuItemCreate) SetNillableName(s *string) *MenuItemCreate {
	if s != nil {
		mic.SetName(*s)
	}
	return mic
}

// SetDescription sets the "description" field.
func (mic *MenuItemCreate) SetDescription(s string) *MenuItemCreate {
	mic.mutation.SetDescription(s)
	return mic
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (mic *MenuItemCreate) SetNillableDescription(s *string) *MenuItemCreate {
	if s != nil {
		mic.SetDescription(*s)
	}
	return mic
}

// SetImage sets the "image" field.
func (mic *MenuItemCreate) SetImage(s string) *MenuItemCreate {
	mic.mutation.SetImage(s)
	return mic
}

// SetNillableImage sets the "image" field if the given value is not nil.
func (mic *MenuItemCreate) SetNillableImage(s *string) *MenuItemCreate {
	if s != nil {
		mic.SetImage(*s)
	}
	return mic
}

// SetCategoryId sets the "categoryId" field.
func (mic *MenuItemCreate) SetCategoryId(i int) *MenuItemCreate {
	mic.mutation.SetCategoryId(i)
	return mic
}

// SetNillableCategoryId sets the "categoryId" field if the given value is not nil.
func (mic *MenuItemCreate) SetNillableCategoryId(i *int) *MenuItemCreate {
	if i != nil {
		mic.SetCategoryId(*i)
	}
	return mic
}

// Mutation returns the MenuItemMutation object of the builder.
func (mic *MenuItemCreate) Mutation() *MenuItemMutation {
	return mic.mutation
}

// Save creates the MenuItem in the database.
func (mic *MenuItemCreate) Save(ctx context.Context) (*MenuItem, error) {
	var (
		err  error
		node *MenuItem
	)
	mic.defaults()
	if len(mic.hooks) == 0 {
		if err = mic.check(); err != nil {
			return nil, err
		}
		node, err = mic.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*MenuItemMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = mic.check(); err != nil {
				return nil, err
			}
			mic.mutation = mutation
			if node, err = mic.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(mic.hooks) - 1; i >= 0; i-- {
			if mic.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = mic.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, mic.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (mic *MenuItemCreate) SaveX(ctx context.Context) *MenuItem {
	v, err := mic.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (mic *MenuItemCreate) Exec(ctx context.Context) error {
	_, err := mic.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mic *MenuItemCreate) ExecX(ctx context.Context) {
	if err := mic.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (mic *MenuItemCreate) defaults() {
	if _, ok := mic.mutation.Name(); !ok {
		v := menuitem.DefaultName
		mic.mutation.SetName(v)
	}
	if _, ok := mic.mutation.Description(); !ok {
		v := menuitem.DefaultDescription
		mic.mutation.SetDescription(v)
	}
	if _, ok := mic.mutation.Image(); !ok {
		v := menuitem.DefaultImage
		mic.mutation.SetImage(v)
	}
	if _, ok := mic.mutation.CategoryId(); !ok {
		v := menuitem.DefaultCategoryId
		mic.mutation.SetCategoryId(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (mic *MenuItemCreate) check() error {
	if _, ok := mic.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "MenuItem.name"`)}
	}
	if _, ok := mic.mutation.Description(); !ok {
		return &ValidationError{Name: "description", err: errors.New(`ent: missing required field "MenuItem.description"`)}
	}
	if _, ok := mic.mutation.Image(); !ok {
		return &ValidationError{Name: "image", err: errors.New(`ent: missing required field "MenuItem.image"`)}
	}
	if _, ok := mic.mutation.CategoryId(); !ok {
		return &ValidationError{Name: "categoryId", err: errors.New(`ent: missing required field "MenuItem.categoryId"`)}
	}
	return nil
}

func (mic *MenuItemCreate) sqlSave(ctx context.Context) (*MenuItem, error) {
	_node, _spec := mic.createSpec()
	if err := sqlgraph.CreateNode(ctx, mic.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (mic *MenuItemCreate) createSpec() (*MenuItem, *sqlgraph.CreateSpec) {
	var (
		_node = &MenuItem{config: mic.config}
		_spec = &sqlgraph.CreateSpec{
			Table: menuitem.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: menuitem.FieldID,
			},
		}
	)
	if value, ok := mic.mutation.Name(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: menuitem.FieldName,
		})
		_node.Name = value
	}
	if value, ok := mic.mutation.Description(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: menuitem.FieldDescription,
		})
		_node.Description = value
	}
	if value, ok := mic.mutation.Image(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: menuitem.FieldImage,
		})
		_node.Image = value
	}
	if value, ok := mic.mutation.CategoryId(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: menuitem.FieldCategoryId,
		})
		_node.CategoryId = value
	}
	return _node, _spec
}

// MenuItemCreateBulk is the builder for creating many MenuItem entities in bulk.
type MenuItemCreateBulk struct {
	config
	builders []*MenuItemCreate
}

// Save creates the MenuItem entities in the database.
func (micb *MenuItemCreateBulk) Save(ctx context.Context) ([]*MenuItem, error) {
	specs := make([]*sqlgraph.CreateSpec, len(micb.builders))
	nodes := make([]*MenuItem, len(micb.builders))
	mutators := make([]Mutator, len(micb.builders))
	for i := range micb.builders {
		func(i int, root context.Context) {
			builder := micb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*MenuItemMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, micb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, micb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, micb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (micb *MenuItemCreateBulk) SaveX(ctx context.Context) []*MenuItem {
	v, err := micb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (micb *MenuItemCreateBulk) Exec(ctx context.Context) error {
	_, err := micb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (micb *MenuItemCreateBulk) ExecX(ctx context.Context) {
	if err := micb.Exec(ctx); err != nil {
		panic(err)
	}
}
