/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/": {
    get: {
      responses: {
        /** OK */
        200: unknown;
      };
    };
  };
  "/users": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.users.id"];
          updated_at?: parameters["rowFilter.users.updated_at"];
          username?: parameters["rowFilter.users.username"];
          avatar_url?: parameters["rowFilter.users.avatar_url"];
          email?: parameters["rowFilter.users.email"];
          created_at?: parameters["rowFilter.users.created_at"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["users"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** users */
          users?: definitions["users"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.users.id"];
          updated_at?: parameters["rowFilter.users.updated_at"];
          username?: parameters["rowFilter.users.username"];
          avatar_url?: parameters["rowFilter.users.avatar_url"];
          email?: parameters["rowFilter.users.email"];
          created_at?: parameters["rowFilter.users.created_at"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.users.id"];
          updated_at?: parameters["rowFilter.users.updated_at"];
          username?: parameters["rowFilter.users.username"];
          avatar_url?: parameters["rowFilter.users.avatar_url"];
          email?: parameters["rowFilter.users.email"];
          created_at?: parameters["rowFilter.users.created_at"];
        };
        body: {
          /** users */
          users?: definitions["users"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/courses": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.courses.id"];
          created_at?: parameters["rowFilter.courses.created_at"];
          name?: parameters["rowFilter.courses.name"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["courses"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** courses */
          courses?: definitions["courses"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.courses.id"];
          created_at?: parameters["rowFilter.courses.created_at"];
          name?: parameters["rowFilter.courses.name"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.courses.id"];
          created_at?: parameters["rowFilter.courses.created_at"];
          name?: parameters["rowFilter.courses.name"];
        };
        body: {
          /** courses */
          courses?: definitions["courses"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/menuItems": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.menuItems.id"];
          created_at?: parameters["rowFilter.menuItems.created_at"];
          name?: parameters["rowFilter.menuItems.name"];
          description?: parameters["rowFilter.menuItems.description"];
          imageUrl?: parameters["rowFilter.menuItems.imageUrl"];
          courseId?: parameters["rowFilter.menuItems.courseId"];
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["menuItems"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** menuItems */
          menuItems?: definitions["menuItems"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.menuItems.id"];
          created_at?: parameters["rowFilter.menuItems.created_at"];
          name?: parameters["rowFilter.menuItems.name"];
          description?: parameters["rowFilter.menuItems.description"];
          imageUrl?: parameters["rowFilter.menuItems.imageUrl"];
          courseId?: parameters["rowFilter.menuItems.courseId"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.menuItems.id"];
          created_at?: parameters["rowFilter.menuItems.created_at"];
          name?: parameters["rowFilter.menuItems.name"];
          description?: parameters["rowFilter.menuItems.description"];
          imageUrl?: parameters["rowFilter.menuItems.imageUrl"];
          courseId?: parameters["rowFilter.menuItems.courseId"];
        };
        body: {
          /** menuItems */
          menuItems?: definitions["menuItems"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
}

export interface definitions {
  users: {
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     */
    id: string;
    /** Format: timestamp with time zone */
    updated_at?: string;
    /** Format: text */
    username?: string;
    /** Format: text */
    avatar_url?: string;
    /** Format: text */
    email?: string;
    /**
     * Format: timestamp with time zone
     * @default now()
     */
    created_at?: string;
  };
  courses: {
    /**
     * Format: bigint
     * @description Note:
     * This is a Primary Key.<pk/>
     */
    id: number;
    /**
     * Format: timestamp with time zone
     * @default now()
     */
    created_at?: string;
    /** Format: text */
    name: string;
  };
  menuItems: {
    /**
     * Format: bigint
     * @description Note:
     * This is a Primary Key.<pk/>
     */
    id: number;
    /**
     * Format: timestamp with time zone
     * @default now()
     */
    created_at: string;
    /** Format: text */
    name: string;
    /** Format: text */
    description?: string;
    /** Format: text */
    imageUrl?: string;
    /**
     * Format: bigint
     * @description Note:
     * This is a Foreign Key to `courses.id`.<fk table='courses' column='id'/>
     */
    courseId?: number;
  };
}

export interface parameters {
  /**
   * @description Preference
   * @enum {string}
   */
  preferParams: "params=single-object";
  /**
   * @description Preference
   * @enum {string}
   */
  preferReturn: "return=representation" | "return=minimal" | "return=none";
  /**
   * @description Preference
   * @enum {string}
   */
  preferCount: "count=none";
  /** @description Filtering Columns */
  select: string;
  /** @description On Conflict */
  on_conflict: string;
  /** @description Ordering */
  order: string;
  /** @description Limiting and Pagination */
  range: string;
  /**
   * @description Limiting and Pagination
   * @default items
   */
  rangeUnit: string;
  /** @description Limiting and Pagination */
  offset: string;
  /** @description Limiting and Pagination */
  limit: string;
  /** @description users */
  "body.users": definitions["users"];
  /** Format: uuid */
  "rowFilter.users.id": string;
  /** Format: timestamp with time zone */
  "rowFilter.users.updated_at": string;
  /** Format: text */
  "rowFilter.users.username": string;
  /** Format: text */
  "rowFilter.users.avatar_url": string;
  /** Format: text */
  "rowFilter.users.email": string;
  /** Format: timestamp with time zone */
  "rowFilter.users.created_at": string;
  /** @description courses */
  "body.courses": definitions["courses"];
  /** Format: bigint */
  "rowFilter.courses.id": string;
  /** Format: timestamp with time zone */
  "rowFilter.courses.created_at": string;
  /** Format: text */
  "rowFilter.courses.name": string;
  /** @description menuItems */
  "body.menuItems": definitions["menuItems"];
  /** Format: bigint */
  "rowFilter.menuItems.id": string;
  /** Format: timestamp with time zone */
  "rowFilter.menuItems.created_at": string;
  /** Format: text */
  "rowFilter.menuItems.name": string;
  /** Format: text */
  "rowFilter.menuItems.description": string;
  /** Format: text */
  "rowFilter.menuItems.imageUrl": string;
  /** Format: bigint */
  "rowFilter.menuItems.courseId": string;
}

export interface operations {}

export interface external {}
